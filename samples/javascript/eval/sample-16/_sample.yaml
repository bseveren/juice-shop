inputs:
  sink: |-
    const cb = callback.bind(callback, ...args);

    const longTimeoutResult: LongTimeoutResult = {
        timer: null,
        clearTimeout: function () {
            if (this.timer) {
                clearTimeout(this.timer);
            }
        },
    };

    if (ms <= MAX_TIMEOUT) {
        longTimeoutResult.timer = setTimeout(cb, ms);
    } else {
        let count = Math.floor(ms / MAX_TIMEOUT); // the number of times we need to delay by max
        const remainder = ms % MAX_TIMEOUT; // the length of the final delay

        const delay = () => {
            if (count > 0) {
                count = count - 1;
                longTimeoutResult.timer = setTimeout(delay, MAX_TIMEOUT);
            } else {
                longTimeoutResult.timer = setTimeout(cb, remainder);
            }
        };

        delay();
    }
  vulnerability: Remote Code Execution possible via eval()-type functions
  ruleId: AIK_ts_eval_nodejs
outputs:
  priority: safe
  reasoning: The argument injected in the setTimeout function is a callback function provided by the caller of the setLongTimeout function. If there is a vulnerability, it is not caused by the fact that it is included in a setTimeout function.
  source: const cb = callback.bind(callback, ...args);
  unittest: null
