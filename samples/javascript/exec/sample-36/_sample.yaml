inputs:
  sink: exec(command, async function (err, stdout, stderr) {
  vulnerability: Potential for OS command injection via child_process call
  ruleId: AIK_js_shell_injection_child_process
outputs:
  priority: medium
  reasoning: The injected command depends on the 'replayscript', 'recipe', 'filepath' and 'testflags' variables. These are all either hardcoded or depend on fields of the workItem object. Since workItem is a function parameter, we climb up the call tree. The runWorkItem is a partly recursive function, which is also called from the store.read().then(list => { operation. 'store' is a .json file that contains the list of workItems. The store file is likely generated by another process but that process is unknown. As more context is needed about the store file, the priority is set to medium.
  source: const command = `${path.join(__dirname, replayscript)} '${recipe}' ${filepath} ${testflags}`
  unittest: null
