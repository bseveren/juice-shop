inputs:
  sink: eval(sel.onchange);
  vulnerability: Remote Code Execution possible via eval()-type functions
  ruleId: eval_nodejs
outputs:
  priority: safe
  # Eval likely to support <element onchange="myScript">;  see https://www.w3schools.com/jsref/event_onchange.asp
  reasoning: This is very likely clientside code, see syntax like sel.options (likely referring to a <select> HTML element), sel.onchange (invoking the onChange event handler). As an onchange HTML attribute can be a javascript expression, it is evaluated. Client-side eval functions are only vulnerable for content generated by other users. E.g. a meeting scheduled by a different user may potentially include a malicious onchange definition for this calendar. But it is very unlikely that a javascript expression for an onchange attribute can be manipulated by another user.
  source: someCalendar.Utils.selectOption = function(sel, val, call_default) {
  unittest: null
